Exercise: Reflection Wildard und Reflection
---------------------------------------------------------------------

Sie haben ein Interface XMLGenerator gegeben, für welches Tests bereitgestellt sind (XMLGeneratorTest).

Implementieren Sie eine Klasse die dieses Interface implementiert
(mit dem Namen "XMLGeneratorImpl")
die in der Lage ist die bereitgestellte Entität (mit dem Namen ImplementedClass.java) im Test-Packgae zu validieren.

Überprüfen Sie Ihre Implementierung mit der Klasse "XMLGeneratorTest". 

Das erwartete XML ist folgendes:

<package name="org.se.lab">
  <class name="ImplementedClass">
  <method name="calculateSum">
    <param type="int">
    <param type="int">
    <param type="int">
  </method>
  <method name="getIds">
  </method>
  <method name="setMyString">
    <param type="java.lang.String">
  </method>
  <method name="getMyString">
  </method>
</class>
</package>


Hints
---------------------------------------------------------------------

Class:
------

public static Class<?> forName(String className)
Returns the {@code Class} object associated with the class or interface 
with the given string name.

public T newInstance()
Creates a new instance of the class represented by this object.

public native boolean isInterface()
Determines if the specified {@code Class} object represents an interface 
type.

public String getName() 
Returns the  name of the entity (class, interface, array class, primitive 
type, or void) represented by this Class object, as a String.

public native Class<? super T> getSuperclass()
Returns the {@code Class} representing the superclass of the entity
(class, interface, primitive type or void) represented by this Class.

public Package getPackage()
Gets the package for this class.  

public Class<?>[] getInterfaces()
Determines the interfaces implemented by the class or interface
represented by this object.

public native int getModifiers();
Returns the Java language modifiers for this class or interface, encoded
in an integer.

public String getSimpleName()
Returns the simple name of the underlying class as given in the
source code.  

public Field[] getFields() throws SecurityException
Returns an array containing {@code Field} objects reflecting all
the accessible public fields of the class or interface represented by
this Class object.

public Method[] getMethods() throws SecurityException
Returns an array containing Method objects reflecting all the public 
methods of the class or interface represented by this Class object, 
including those declared by the class or interface and those inherited 
from superclasses and superinterfaces.

public Field getField(String name)
Returns a Field object that reflects the specified public member field 
of the class or interface represented by this Class object. The name 
parameter is a String specifying the simple name of the desired field.

public Field[] getDeclaredFields() throws SecurityException
Returns an array of Field objects reflecting all the fields
declared by the class or interface represented by this Class object. 
This includes public, protected, default (package) access, and private 
fields, but excludes inherited fields.

public Method[] getDeclaredMethods() throws SecurityException 
Returns an array containing Method objects reflecting all the
declared methods of the class or interface represented by this Class 
object, including public, protected, default (package) access, and 
private methods, but excluding inherited methods.
     
public Field getDeclaredField(String name)
Returns a Field object that reflects the specified declared
field of the class or interface represented by this Class
object. The name parameter is a String that specifies the simple 
name of the desired field.


Method:
-------

public String getName() 
Returns the name of the method represented by this Method object, 
as a String.

public Class<?> getReturnType() 
Returns a Class object that represents the formal return type of 
the method represented by this {@code Method} object.     

public boolean isAnnotationPresent(Class<? extends Annotation> annotationClass)
Returns true if an annotation for the specified type is present on this element, 
else false.
